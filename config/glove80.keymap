/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2025 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behavior includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* On demand includes */


/* Automatically generated layer name #define */
#define LAYER_Base 0
#define LAYER_Lower 1
#define LAYER_Magic 2
#define LAYER_Factory 3

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */


/* Input Listeners */


/* System behavior and Macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

/* Custom Defined Behaviors */
/ {

};

/* Automatically generated macro definitions */
/ {
    macros {

        parens_macro: parens_macro {
            label = "&PARENS_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR>
                , <&kp RPAR>
                , <&kp LEFT>;
        };

        bracket_macro: bracket_macro {
            label = "&BRACKET_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT>
                , <&kp RBKT>
                , <&kp LEFT>;
        };

        curly_macro: curly_macro {
            label = "&CURLY_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBRC>
                , <&kp RBRC>
                , <&kp LEFT>;
        };

        double_quote_macro: double_quote_macro {
            label = "&DOUBLE_QUOTE_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DQT>
                , <&kp DQT>
                , <&kp LEFT>;
        };

        single_quote_macro: single_quote_macro {
            label = "&SINGLE_QUOTE_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT>
                , <&kp SQT>
                , <&kp LEFT>;
        };

        // Ctrl + S
        save_file_macro: save_file_macro {
            label = "&SAVE_FILE_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>
                , <&kp S>;
        };

        // <> + left
        angle_brackets_macro: angle_brackets_macro {
            label = "&ANGLE_BRACKETS_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT>
                , <&kp GT>
                , <&kp LEFT>;
        };

        // ->
        arrow_operator_macro: arrow_operator_macro {
            label = "&ARROW_OPERATOR_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_MINUS>
                , <&kp GT>;
        };

        // =>
        fat_arrow_macro: fat_arrow_macro {
            label = "&FAT_ARROW_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_EQUAL>
                , <&kp GT>;
        };

        // Ctrl + Z
        undo_macro: undo_macro {
            label = "&UNDO_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>
                , <&kp Z>;
        };

        // Ctrl + Y
        redo_macro: redo_macro {
            label = "&REDO_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>
                , <&kp Y>;
        };

        // const variableName = () => { };
        js_arrow_function_macro: js_arrow_function_macro {
            label = "&JS_ARROW_FUNCTION_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C>
                , <&kp O>
                , <&kp N>
                , <&kp S>
                , <&kp T>
                , <&kp SPACE>
                , <&kp V>
                , <&kp A>
                , <&kp R>
                , <&kp N>
                , <&kp A>
                , <&kp M>
                , <&kp E>
                , <&kp SPACE>
                , <&kp EQUAL>
                , <&kp SPACE>
                , <&kp LPAR>
                , <&kp RPAR>
                , <&kp SPACE>
                , <&kp EQUAL>
                , <&kp GT>
                , <&kp SPACE>
                , <&kp LBRC>
                , <&kp SPACE>
                , <&kp SPACE>
                , <&kp RBRC>
                , <&kp SEMI>
                , <&kp LEFT>
                , <&kp LEFT>
                , <&kp LEFT>;
        };

        // console.log();
        console_log_macro: console_log_macro {
            label = "&CONSOLE_LOG_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C>
                , <&kp O>
                , <&kp N>
                , <&kp S>
                , <&kp O>
                , <&kp L>
                , <&kp E>
                , <&kp DOT>
                , <&kp L>
                , <&kp O>
                , <&kp G>
                , <&kp LPAR>
                , <&kp RPAR>
                , <&kp SEMI>
                , <&kp LEFT>
                , <&kp LEFT>;
        };

        // `` + left
        backtick_macro: backtick_macro {
            label = "&BACKTICK_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>
                , <&kp GRAVE>
                , <&kp LEFT>;
        };
    };
};

/* Automatically generated behavior definitions */
/ {
    behaviors {

        // left home row mod keys
        HRM_LEFT: HRM_LEFT {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            retro-tap;
            hold-trigger-key-positions = <79 17 29 41 7 18 19 21 30 31 33 43 44 61 62 78 16 20 32 42 45 52 53 54 56 57 60 63 69 70 71 72 73 75 76 77 74 58 59 40 28 5 6 8 9 55>;
            hold-trigger-on-release;
        };

        // right home row mod keys
        HRM_RIGHT: HRM_RIGHT {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <150>;
            retro-tap;
            hold-trigger-key-positions = <0 1 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 57 64 65 66 67 68 69 70 71 72 73 74 2 3>;
            hold-trigger-on-release;
        };

        // right index finger home row mod keys
        HRM_RIGHT_INDEX: HRM_RIGHT_INDEX {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            retro-tap;
            hold-trigger-key-positions = <0 1 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 57 64 65 66 67 68 69 70 71 72 73 74 2 3>;
            hold-trigger-on-release;
        };

        // left index finger home row mod keys
        HRM_LEFT_INDEX: HRM_LEFT_INDEX {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            retro-tap;
            hold-trigger-key-positions = <79 17 29 41 7 18 19 21 30 31 33 43 44 61 62 78 16 20 32 42 45 52 53 54 56 57 60 63 69 70 71 72 73 75 76 77 74 58 59 40 28 5 6 8 9 55>;
            hold-trigger-on-release;
        };
    };
};

/* Automatically generated combos definitions */
/ {
      combos {
          compatible = "zmk,combos";
                  combo_capsword {
            timeout-ms = <200>;
            key-positions = <71 57>;
            bindings = <&caps_word>;
            layers = <0>;
        };

        // open and close single quotes
        combo_single_quotes {
            timeout-ms = <200>;
            key-positions = <71 55>;
            bindings = <&single_quote_macro>;
            layers = <0>;
        };

        // open and close parenthesis
        combo_parenthesis {
            timeout-ms = <200>;
            key-positions = <72 52>;
            bindings = <&parens_macro>;
            layers = <0>;
        };

        // open and close double quotes
        combo_double_quotes {
            timeout-ms = <200>;
            key-positions = <71 56>;
            bindings = <&double_quote_macro>;
            layers = <0>;
        };

        // open and close curly braces
        combo_curly_braces {
            timeout-ms = <200>;
            key-positions = <72 54>;
            bindings = <&curly_macro>;
            layers = <0>;
        };

        // open and close brackets
        combo_brackets {
            timeout-ms = <200>;
            key-positions = <72 53>;
            bindings = <&bracket_macro>;
            layers = <0>;
        };

        // open and close backticks for code formatting
        combo_backtick_combo {
            timeout-ms = <200>;
            key-positions = <52 46>;
            bindings = <&backtick_macro>;
            layers = <0>;
        };
      };
    };

/* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1    &kp F2             &kp F3            &kp F4                   &kp F5                                                                                                     &kp F6             &kp F7              &kp F8                &kp F9    &kp F10
            &kp EQUAL    &kp N1             &kp N2            &kp N3                   &kp N4  &kp N5                                                                   &kp N6                    &kp N7             &kp N8              &kp N9                &kp N0   &kp BSLH
              &kp TAB     &kp Q              &kp W             &kp E                    &kp R   &kp T                                                                    &kp Y                     &kp U              &kp I               &kp O                 &kp P  &kp MINUS
              &kp ESC     &kp A  &HRM_LEFT LCTRL S  &HRM_LEFT LALT D  &HRM_LEFT_INDEX LSHFT F   &kp G                                                                    &kp H  &HRM_RIGHT_INDEX RSHFT J  &HRM_RIGHT RALT K  &HRM_RIGHT RCTRL L  &HRM_RIGHT RGUI SEMI    &kp SQT
            &kp GRAVE     &kp Z              &kp X             &kp C                    &kp V   &kp B    &lower  &kp LSHFT  &kp LCTRL  &kp LCTRL  &kp LSHFT   &kp LGUI   &kp N                     &kp M          &kp COMMA             &kp DOT              &kp FSLH  &kp PG_UP
 &magic LAYER_Magic 0  &kp HOME            &kp END          &kp LEFT                &kp RIGHT          &kp BSPC    &kp DEL   &kp LALT   &kp RALT    &kp RET  &kp SPACE                            &kp UP           &kp DOWN            &kp LBKT              &kp RBKT  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
         &kp C_BRI_DN              &kp C_BRI_UP      &kp C_PREV        &kp C_PP       &kp C_NEXT                                                                                                   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
               &trans        &console_log_macro           &none           &none            &none   &kp HOME                                                                  &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
               &trans  &js_arrow_function_macro           &none    &kp UP_ARROW            &none    &kp END                                                                 &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
               &trans                     &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                                           &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
               &trans                 &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &angle_brackets_macro  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
 &magic LAYER_Magic 0                  &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans                 &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &to 3
            >;
        };

        layer_Factory {
            bindings = <
 &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_4                                                                                                                  &kp NUMBER_4  &kp NUMBER_8  &kp NUMBER_2  &kp NUMBER_6  &kp NUMBER_0
 &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_3  &kp NUMBER_9  &kp NUMBER_5  &kp NUMBER_0                                                                                      &kp NUMBER_0  &kp NUMBER_5  &kp NUMBER_9  &kp NUMBER_3  &kp NUMBER_7  &kp NUMBER_1
 &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_4  &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_1                                                                                      &kp NUMBER_1  &kp NUMBER_6  &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_8  &kp NUMBER_2
 &kp NUMBER_3  &kp NUMBER_9  &kp NUMBER_5  &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_2                                                                                      &kp NUMBER_2  &kp NUMBER_7  &kp NUMBER_1  &kp NUMBER_5  &kp NUMBER_9  &kp NUMBER_3
 &kp NUMBER_4  &kp NUMBER_0  &kp NUMBER_6  &kp NUMBER_2  &kp NUMBER_8  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_8  &kp NUMBER_2  &kp NUMBER_6  &kp NUMBER_0  &kp NUMBER_4
 &kp NUMBER_5  &kp NUMBER_1  &kp NUMBER_7  &kp NUMBER_3  &kp NUMBER_9                &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7                &kp NUMBER_9  &kp NUMBER_3  &kp NUMBER_7  &kp NUMBER_1  &kp NUMBER_5
            >;
        };

    };
};